// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ng_xhung

//@version=5
indicator("My script",overlay = true)
showSession = input(false, 'ASR-B20', group = 'ON/OFF', inline = '3')

show_sesc = input(true, '', inline = 'sesc', group = 'Session C')
sesc_txt = input('Tokyo', '', inline = 'sesc', group = 'Session C')
sesc_ses = input.session('2000-0000', '', inline = 'sesc', group = 'Session C')
sesc_css = input.color(color.rgb(71,71,71, 50), '', inline = 'sesc', group = 'Session C')
onlyTody = input(true,'hien ngay hom nay', inline = 'sesc', group = 'Session C')
sesc_range = input(true, 'Range', inline = 'sesc_overlays', group = 'Session C')
sesc_maxmin = input(false, 'Max/Min', inline = 'sesc_overlays', group = 'Session C')

//Timezones
tz_incr = input.int(-4, 'UTC (+/-)', group = 'Timezone', group = "EntryTime")
use_exchange = input(false, 'Use Exchange Timezone', group = 'EntryTime')

//Ranges Options
bg_transp = input.float(90, 'Range Area Transparency', group = 'Ranges Settings')
show_outline = input(false, 'Range Outline', group = 'Ranges Settings')
show_txt = input(false, 'Range Label', group = 'Ranges Settings')

//-----------------------------------------------------------------------------}
//Functions
//-----------------------------------------------------------------------------{
n = bar_index

//Set line
set_line(session, y1, y2, session_css)=>
    var line tl = na

    if session > session[1]
        tl := line.new(n, close, n, close, color = session_css)

    if session and session == session[1]
        line.set_y1(tl, y1)
        line.set_xy2(tl, n, y2)

//Set session range
get_range(session, session_name, session_css)=>
    var t = 0 
    var max = high
    var min = low
    var box bx = na
    var label lbl = na 
    
    if session > session[1]
        t := time
        max := high
        min := low

        bx := box.new(n, max, n, min
          , bgcolor = color.new(session_css, bg_transp)
          , border_color = show_outline ? session_css : na
          , border_style = line.style_dotted)

        if show_txt
            lbl := label.new(t, max, session_name
              , xloc = xloc.bar_time
              , textcolor = session_css
              , style = label.style_label_down
              , color = color.new(color.white, 100)
              , size = size.tiny)

    if session and session == session[1]
        max := math.max(high, max)
        min := math.min(low, min)

        box.set_top(bx, max)
        box.set_rightbottom(bx, n, min)

        if show_txt
            label.set_xy(lbl, int(math.avg(t, time)), max)
    
    [session ? na : max, session ? na : min]

//-----------------------------------------------------------------------------}
//Sessions
//-----------------------------------------------------------------------------{
tf = timeframe.period

var tz = use_exchange ? syminfo.timezone :
  str.format('UTC{0}{1}', tz_incr >= 0 ? '+' : '-', math.abs(tz_incr))

is_sesc = math.sign(nz(time(tf, sesc_ses, tz)))

//-----------------------------------------------------------------------------}
//Overlays
//-----------------------------------------------------------------------------{

var float max_sesc = na
var float min_sesc = na

//Ranges
if show_sesc and sesc_range and showSession
    [max, min] = get_range(is_sesc, sesc_txt, sesc_css)
    max_sesc := max
    min_sesc := min


//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
// Plot max/min
// Tính toán mức Fibonacci
fibonacci_target3 = max_sesc + (max_sesc - min_sesc) * 3.236
fibonacci_target2 = max_sesc + (max_sesc - min_sesc) * 1.618
fibonacci_target1 = max_sesc + (max_sesc - min_sesc) * 0.618
fibonacci_target3_down = min_sesc - (max_sesc - min_sesc) * 3.236
fibonacci_target2_down = min_sesc - (max_sesc - min_sesc) * 1.618
fibonacci_target1_down = min_sesc - (max_sesc - min_sesc) * 0.618

isToday = year == year(timenow) and month == month(timenow) and dayofmonth == dayofmonth(timenow)
isToday := onlyTody?isToday:true
drawnArrow = false
// // Vẽ đường line target của Asian Range
// line.new(x1=bar_index[1], y1=max_sesc, x2=bar_index, y2=fibonacci_high, color=color.blue, width=2, extend=extend.both, style=line.style_dotted)
bardaaw = 0
bardaaw := bardaaw[1] != 0 ?bardaaw[1]:0
if hour == 1 and minute == 00
    bardaaw := time

uptrend = -1
uptrend := close > max_sesc? 2 :close < min_sesc?1:0

if close < min_sesc and isToday
    var isDraw = line.new(x1=bardaaw, y1=min_sesc, x2=bardaaw, y2=fibonacci_target1_down, color=#a1a1a1, width=1, style=line.style_arrow_right,xloc = xloc.bar_time)
    line.new(x1=bardaaw, y1=min_sesc, x2=bardaaw, y2=fibonacci_target2_down, color=#a1a1a1, width=1, style=line.style_arrow_right,xloc = xloc.bar_time)
    // if close < fibonacci_target1_down
    line.new(x1=bardaaw, y1=fibonacci_target1_down, x2=time, y2=fibonacci_target1_down, color=#858585, width=1, style=line.style_solid,xloc = xloc.bar_time)
    line.new(x1=bardaaw, y1=fibonacci_target2_down, x2=time, y2=fibonacci_target2_down, color=#858585, width=1, style=line.style_solid,xloc = xloc.bar_time)
    string tp2 = 'Tp2: ' + str.tostring(fibonacci_target2_down)
    string tp1 = 'Tp1: ' + str.tostring(fibonacci_target1_down)
    label.new(x=bardaaw, y=fibonacci_target2_down, style=label.style_label_right,color=color.rgb(100,100,100,100), size=size.small,xloc = xloc.bar_time,text = tp2)
    label.new(x=bardaaw, y=fibonacci_target1_down, style=label.style_label_right,color=color.rgb(100,100,100,100), size=size.small,xloc = xloc.bar_time,text = tp1)
    if close < fibonacci_target2_down 
        line.new(x1=bardaaw, y1=fibonacci_target2_down, x2=bardaaw, y2=fibonacci_target3_down, color=#a1a1a1, width=1, style=line.style_arrow_right,xloc = xloc.bar_time)
        line.new(x1=bardaaw, y1=fibonacci_target3_down, x2=time, y2=fibonacci_target3_down, color=#a1a1a1, width=1, style=line.style_solid,xloc = xloc.bar_time)


if close > max_sesc and isToday
    isDraw = line.new(x1=bardaaw, y1=max_sesc, x2=bardaaw, y2=fibonacci_target1, color=#a1a1a1, width=1, style=line.style_arrow_right,xloc = xloc.bar_time)
    line.new(x1=bardaaw, y1=max_sesc, x2=bardaaw, y2=fibonacci_target2, color=#a1a1a1, width=1, style=line.style_arrow_right,xloc = xloc.bar_time)
    line.new(x1=bardaaw, y1=fibonacci_target1, x2=time, y2=fibonacci_target1, color=#858585, width=1, style=line.style_solid,xloc = xloc.bar_time)
    line.new(x1=bardaaw, y1=fibonacci_target2, x2=time, y2=fibonacci_target2, color=#858585, width=1, style=line.style_solid,xloc = xloc.bar_time)
    // if na(1)
    string tp2 = 'Tp2: ' + str.tostring(fibonacci_target2)
    string tp1 = 'Tp1: ' + str.tostring(fibonacci_target1)
    label.new(x=bardaaw, y=fibonacci_target2, style=label.style_label_right,color=color.rgb(100,100,100,100), size=size.small,xloc = xloc.bar_time,text = tp2)
    label.new(x=bardaaw, y=fibonacci_target1, style=label.style_label_right,color=color.rgb(100,100,100,100), size=size.small,xloc = xloc.bar_time,text = tp1)
    if close > fibonacci_target2
        line.new(x1=bardaaw, y1=fibonacci_target2, x2=bardaaw, y2=fibonacci_target3, color=#a1a1a1, width=1, style=line.style_arrow_right,xloc = xloc.bar_time)
        line.new(x1=bardaaw, y1=fibonacci_target3, x2=time, y2=fibonacci_target3, color=#a1a1a1, width=1, style=line.style_solid,xloc = xloc.bar_time)

plot(sesc_maxmin ? max_sesc : na, 'Session C Maximum', sesc_css, 1, plot.style_linebr)
plot(sesc_maxmin ? min_sesc : na, 'Session C Minimum', sesc_css, 1, plot.style_linebr)
